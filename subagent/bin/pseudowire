#!/usr/bin/perl
###
### Copyright (C) 2016 Alexander Gall <gall@switch.ch>
###
### This program is free software: you can redistribute it and/or
### modify it under the terms of the GNU General Public License as
### published by the Free Software Foundation, either version 3 of the
### License, or (at your option) any later version.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
### General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use Getopt::Long;
use Snabb::SNMP::Agent qw(%persistent_ifIndex %compound_scalar_handlers);
my %opt = ( 'check-interval' => 5,
            'mibs-dirs' => '',
            'shmem-dir' => '/var/lib/snabb/shmem',
            'pseudowires' => '');

sub usage() {
  print <<"EOF";
usage: $0 --ifindex=<file>
EOF
  exit(1);
}

## List of PWs in use by currently running instances
my %pwIDs;

## Mappings of PW shared memory segments to the index of the
## pwTable/cpwVcTable
my %pwIndex;
my $pwIndex = 1;

## Indexer for pwTable/cpwVcTable.  It uses the name of the segment
## that represents a row in these tables to generate the index.
sub pw_indexer($$$) {
  my ($oid, $table_oid, $segment) = @_;
  my $name = $segment->{name};
  if (not $pwIDs{$name}) {
    warn "Unknown pseudowire $name, skipping";
    return undef;
  }
  my $index = $pwIndex{$name};
  unless (defined $index) {
    $index = $pwIndex++;
    print("Allocating PW index $index for segment $name\n");
    $pwIndex{$name} = $index;
  }
  return $oid.".".$index;
}

## Indexer for the pwEnetTable.  It has two indexes.  The first is the
## pwIndex according to the pw_indexer.  the second is the value of
## the pwEnetPwInstance object.
sub pw_enet_indexer($$$) {
  my ($oid, $table_oid, $segment) = @_;
  $oid = pw_indexer($oid, $table_oid, $segment);
  $oid or return undef;
  my $pwEnetPwInstance_obj = $segment->{objs}{pwEnetPwInstance};
  defined $pwEnetPwInstance_obj or
    die "pw_enet_indexer: no pwEnetPwInstance present for segment "
      ."$segment->{name}";
  tie my $pwEnetPwInstance, 'Snabb::SNMP::Tie::INTEGER', $segment,
    'pwEnetPwInstance';

  return $oid.".".$pwEnetPwInstance;
}

## Indexer for the cpwVcEnetTable.  It has two indexes.  The first is
## the cpwVcIndex according to the pw_indexer.  the second is the value
## of the cpwVcEnetPwVlan object.
sub cpw_enet_indexer($$$) {
  my ($oid, $table_oid, $segment) = @_;
  $oid = pw_indexer($oid, $table_oid, $segment);
  my $cpwVcEnetPwVlan_obj = $segment->{objs}{cpwVcEnetPwVlan};
  defined $cpwVcEnetPwVlan_obj or
    die "cpw_enet_indexer: no cpwVcEnetPwVlan present for segment "
      ."$segment->{name}";
  tie my $cpwVcEnetPwVlan, 'Snabb::SNMP::Tie::INTEGER', $segment,
    'cpwVcEnetPwVlan';

  return $oid.".".$cpwVcEnetPwVlan;
}

## Handler for {cpwVC, pw}EnetPortIfIndex
sub enet_port_ifindex_handler($$$) {
  my ($value, $name, $segment) = @_;
  my $aux_name = "_X_$name";
  exists $segment->{objs}{$aux_name} or die
    "$name handler: auxiliary object $aux_name does not exist";
  tie my $ifDescr, 'Snabb::SNMP::Tie::OCTETSTR', $segment,
    $aux_name;
  ## An empty string indicates that the port is not associated
  ## with a proper interface (e.g. if it is a virtual bridge
  ## port in case of a multi-point VPN).
  my $ifIndex = 0;
  if ($ifDescr ne '') {
    unless (defined ($ifIndex = $persistent_ifIndex{$ifDescr})) {
      warn "$name handler: unknown interface $ifDescr, "
	."synthesizing EnetPortIfIndex = 0";
      $ifIndex = 0;
    }
  }
  return($ifIndex);
}

my %subtrees =
  ( cpwVcMIB =>
    { tables =>
      { scalars =>
	{ handlers =>
	  { cpwVcIndexNext =>
	    { compound_handler => sub { return $pwIndex; } },
	    cpwVcPerfTotalErrorPackets =>
	    { compound_handler => $compound_scalar_handlers{accumulator} },
	  },
	},

	cpwVcTable =>
	{ indexer => \&pw_indexer,
	},
      },
    },

    pwStdMIB =>
    { tables =>
      { scalars =>
	{ handlers =>
	  { pwIndexNext =>
	    { compound_handler => sub { return $pwIndex; } },
	    pwPerfTotalErrorPackets =>
	    { compound_handler => $compound_scalar_handlers{accumulator} },
	  },
	},

	pwTable =>
	{ indexer => \&pw_indexer,
	},
      },
    },

    cpwVcEnetMIB =>
    { tables =>
      { cpwVcEnetTable =>
	{ indexer => \&cpw_enet_indexer,
	  handlers =>
	  { cpwVcEnetPortIfIndex =>
	    { handler => \&enet_port_ifindex_handler },
	  },
	},
      },
    },

    pwEnetStdMIB =>
    { tables =>
      { pwEnetTable =>
	{ indexer => \&pw_enet_indexer,
	  handlers =>
	  { pwEnetPortIfIndex =>
	    { handler => \&enet_port_ifindex_handler },
	  },
	},
      },
    },

  );

GetOptions(\%opt, "check-interval=i", "mibs-dirs=s",
           "ifindex=s", "shmem-dir=s", "pseudowires=s") or usage();
defined $opt{ifindex} and $opt{pseudowires} or usage();

## Build the list of active pseudowires.  A pseudowire segment is only
## parsed if its name is on this list.  This is used to skip left-over
## segments that are not in use by any running instance.
open(PWS, $opt{pseudowires}) or
  die "Can't open pseudowire ID file $opt{pseudowires}: $!";
while (<PWS>) {
  chomp;
  (my ($pwID) = split(/\s+/)) == 1 or
    die "Parse error in pseudowire ID file $opt{pseudowires}";
  print("Adding pseudowire $pwID\n");
  $pwIDs{$pwID} = 1;
}
close(IFINDEX);

Snabb::SNMP::Agent::start({ name => "pseudowire",
                            subtrees => \%subtrees,
			    check_interval => $opt{'check-interval'},
                            if_index => $opt{ifindex},
                            mibs_dirs => $opt{'mibs-dirs'},
                            mibs => 'CISCO-SMI:CISCO-IETF-PW-TC-MIB'
                            .':CISCO-IETF-PW-MIB:PW-STD-MIB'
                            .':CISCO-IETF-PW-ENET-MIB:PW-ENET-STD-MIB',
                            shmem_dir => $opt{'shmem-dir'},
			  });

## Not reached

## Local Variables:
## mode: CPerl
## End:
